@model ProjectModel
@{
    ViewData["PageTitle"] = $"Project: {Model.Title}";
    ViewData["Title"] = Model.Title;
    ViewData["OptionalTitle"] = "Edit";
}

@section PageLevelStyles
{
    <environment names="Development">
        <link href="~/node/fine-uploader/fine-uploader/fine-uploader-gallery.css" rel="stylesheet" />
    </environment>
    <environment names="Staging,Production">
        <link href="~/node/fine-uploader/fine-uploader/fine-uploader-gallery.css" rel="stylesheet" />
    </environment>
}

@section PageLevelScriptsBottom
{
    <script>
        CKEDITOR.replace('Description', { height: 200 });
    </script>
}

@section PageLevelScripts
{
    <environment names="Staging,Production">
        <script src="~/node/fine-uploader/fine-uploader/fine-uploader.core.min.js"></script>
        <script src="~/node/fine-uploader/fine-uploader/fine-uploader.min.js"></script>
    </environment>
    <environment names="Development">
        <script src="~/node/fine-uploader/fine-uploader/fine-uploader.core.js"></script>
        <script src="~/node/fine-uploader/fine-uploader/fine-uploader.js"></script>
    </environment>
    <script src="~/node/ckeditor/ckeditor.js"></script>

    <script>
        function setYearsMonthToVisibility() {
            var monthsTo = $("#months-to");
            var yearsTo = $("#years-to");
            var endDateLabel = $("#end-date-label");

            var monthToFormGroup = monthsTo.closest(".form-group");
            var yearToFormGroup = yearsTo.closest(".form-group");

            var labelText = endDateLabel.text();
            labelText = labelText === "Present" ? "End Date" : "Present";
            endDateLabel.text(labelText);

            var visibility = monthToFormGroup.css("visibility");
            visibility = visibility === "visible" ? "collapse" : "visible";
            if (visibility === "collapse") {
                // reset the selections
                monthsTo.val('Month');
                yearsTo.val('Year');
            }

            monthToFormGroup.css("visibility", visibility);
            yearToFormGroup.css("visibility", visibility);
        }

        $(document).ready(function () {
            $('input').iCheck({
                checkboxClass: 'icheckbox_flat-aero',
                radioClass: 'iradio_flat-aero>'
            }).on('ifChecked', function (e) {
                if (e.target.id === "ongoing-project-toggle") {
                    setYearsMonthToVisibility();
                }
            }).on('ifUnchecked', function (e) {
                if (e.target.id === "ongoing-project-toggle") {
                    setYearsMonthToVisibility();
                }
            });
        });
    </script>
    <script type="text/template" id="qq-template">
        <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="Drop files here">
            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
            </div>
            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                <span class="qq-upload-drop-area-text-selector"></span>
            </div>
            <div class="qq-upload-button-selector qq-upload-button">
                <div>Upload a file</div>
            </div>
            <span class="qq-drop-processing-selector qq-drop-processing">
                <span>Processing dropped files...</span>
                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
            </span>
            <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals">
                <li>
                    <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                    <div class="qq-progress-bar-container-selector qq-progress-bar-container">
                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                    </div>
                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                    <div class="qq-thumbnail-wrapper">
                        <img class="qq-thumbnail-selector" qq-max-size="120" qq-server-scale>
                    </div>
                    <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">X</button>
                    <button type="button" class="qq-upload-retry-selector qq-upload-retry">
                        <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>
                        Retry
                    </button>

                    <div class="qq-file-info">
                        <div class="qq-file-name">
                            <span class="qq-upload-file-selector qq-upload-file"></span>
                            <span class="qq-edit-filename-icon-selector qq-btn qq-edit-filename-icon" aria-label="Edit filename"></span>
                        </div>
                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                        <span class="qq-upload-size-selector qq-upload-size"></span>
                        <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">
                            <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>
                        </button>
                        <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">
                            <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>
                        </button>
                        <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">
                            <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>
                        </button>
                    </div>
                </li>
            </ul>

            <dialog class="qq-alert-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <div class="qq-dialog-buttons">
                    <button type="button" class="qq-cancel-button-selector">Close</button>
                </div>
            </dialog>

            <dialog class="qq-confirm-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <div class="qq-dialog-buttons">
                    <button type="button" class="qq-cancel-button-selector">No</button>
                    <button type="button" class="qq-ok-button-selector">Yes</button>
                </div>
            </dialog>

            <dialog class="qq-prompt-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <input type="text">
                <div class="qq-dialog-buttons">
                    <button type="button" class="qq-cancel-button-selector">Cancel</button>
                    <button type="button" class="qq-ok-button-selector">Ok</button>
                </div>
            </dialog>
        </div>
    </script>
}

<div class="row">
    <div class="col-xs-12">
        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#project-tab" data-toggle="tab">Note</a></li>
                <li><a href="#project-pictures-tab" data-toggle="tab">Pictures</a></li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="project-tab">
                    <section id="new">
                        <div class="row">
                            <div class="col-md-12">
                                <form method="post" enctype="multipart/form-data">
                                    @{
                                        await Html.RenderPartialAsync("_createUpdateForm", Model);
                                    }
                                </form>
                            </div>
                        </div>
                    </section>
                </div>
                <div class="tab-pane" id="project-pictures-tab">
                    <div class="panel-group">
                        <div class="panel panel-default" style="">
                            <div class="panel-body" style="padding: 5px;">
                                <section id="new">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="box-body">
                                                @(Html.Kendo().Grid<ProjectPictureDto>()
                                                                                      .Name("grid")
                                                                                      .Editable(conf => conf.DisplayDeleteConfirmation(true))
                                                                                      .Columns(columns =>
                                                                                      {
                                                                                          columns.Bound(c => c.Id).Visible(false);
                                                                                          columns.Bound(c => c.FileName).Title(" ").Width(50).ClientTemplate("<a href='#=FileName#' target='_blank'><img src='#:FileName#' width='75px'></img></a>").Editable("false");
                                                                                          columns.Bound(c => c.DisplayOrder).Title("#").Width(25);
                                                                                          columns.Bound(c => c.IsVisible).Title("Visible").Width(25);
                                                                                          columns.Bound(c => c.Caption);
                                                                                          columns.Command(c =>
                                                                                          {
                                                                                              c.Edit();
                                                                                              c.Destroy();
                                                                                          }).Width(250);
                                                                                      })
                                                                                      .Events(e =>
                                                                                      {
                                                                                          e.Edit("onGridEdit");
                                                                                      })
                                                                                      .Scrollable(sc => sc.Enabled(false))
                                                                                      .Pageable(pageable => pageable
                                                                                          .Enabled(true)
                                                                                          .Refresh(true)
                                                                                          .Numeric(false)
                                                                                          .PreviousNext(false)
                                                                                          .Info(false))
                                                                                      .DataSource(dataSource => dataSource
                                                                                          .Ajax()
                                                                                          .ServerOperation(false)
                                                                                          .PageSize(25)
                                                                                          .Read(read => read.Action("ProjectPicturesGrid_Read", "Projects", new { projectId = Model.Id }))
                                                                                          .Update(dest => dest.Action("ProjectPicturesGrid_Update", "Projects"))
                                                                                          .Destroy(dest => dest.Action("ProjectPicture_Delete", "Projects").Type(HttpVerbs.Post))
                                                                                          .Model(m =>
                                                                                          {
                                                                                              m.Id(t => t.Id);
                                                                                              m.Field(t => t.Id);
                                                                                              m.Field(t => t.FileName).Editable(false);
                                                                                          })
                                                                                      ))
                                            </div>
                                        </div>
                                        <script>
                                            function getPictureTemplate(data) {
                                                return '<a href="#=RelativePath#" target="_blank"><img alt="#=Id#" src="#=RelativePath#" width="150" /></a>';
                                            }
                                            function onGridEdit(arg) {
                                                arg.container.find("input[name=DisplayOrder]").width("50");
                                            }
                                        </script>
                                    </div>
                                </section>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                Add Project Pictures
                            </div>
                            <div class="panel-body">
                                <div id="uploader"></div>
                                <script>
                                    var kendoPictureGrid = function() {
                                        var grid = $("#grid").data("kendoGrid");
                                        return grid;
                                    };

                                    var uploader = new qq.FineUploader({
                                        element: document.getElementById("uploader"),
                                        request: {
                                            endpoint: "@Url.Action("FineUploader_Upload", "Projects")",
                                            autoUpload: false,
                                            inputName: "imageFile",
                                            params: {
                                                projectId: @Model.Id
                                            }
                                        },
                                        deleteFile: {
                                            enabled: true,
                                            endpoint: "@Url.Action("ProjectPicture_Delete", "Projects")",
                                            params: {
                                                // no extra params for delete operation
                                            }
                                        },
                                        callbacks: {
                                            onComplete: function(id, name, responseJson) {
                                                var savedPictureId = responseJson.pictureId;
                                                this.setDeleteFileParams({
                                                    pictureId: savedPictureId
                                                });
                                            },
                                            onAllComplete: function (succeededUploads, failedUploads) {
                                                //if (succeededUploads.length > 0) {
                                                //    var grid = kendoPictureGrid();
                                                //    grid.dataSource.read();
                                                //}
                                            }
                                        }
                                    });
                                </script>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>